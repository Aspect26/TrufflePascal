COMPILER Pascal

IGNORECASE

CHARACTERS

letter = 'A'..'Z' + 'a'..'z'.
nonZeroDigit = "123456789".
digit = "0123456789".

cr = '\r'.
lf = '\n'.
tab = '\t'.

stringChar = ANY - "\"" - '\\' - cr - lf.

TOKENS

identifier = letter {letter | digit} .
stringLiteral = "'" { stringChar } "'".
numericLiteral = "0" | nonZeroDigit { digit }.

PRAGMAS

COMMENTS FROM "{" TO "}"
COMMENTS FROM "//" TO lf
IGNORE cr + lf + tab

PRODUCTIONS

Pascal = MainFunction.


MainFunction 
= 							                    (. factory.startMainFunction(); .)
MainBlock<out StatementNode blockNode>          (. factory.finishMainFunction(); .)
                                                (. mainNode = blockNode; .)
.



MainBlock<out StatementNode blockNode>
= 							                    (. factory.startMainBlock(); .)
"BEGIN" 						                (. List<StatementNode> body = new ArrayList<>(); .)
{ 
	Statement<out StatementNode statement>  	(. body.add(statement); .)
} 
"END."							                (. blockNode = factory.finishMainBlock(body); .)
.

Statement<out StatementNode statement>
=
(
    Expression<out statement> ";"
)
.


Expression<out ExpressionNode expression>
=							                    (. expression = null; .)
(
	identifier
	MemberExpression<out expression, null, t>
|
	stringLiteral					            (. expression = factory.createStringLiteral(t); .)
)
.



MemberExpression<out ExpressionNode expression, ExpressionNode r, Token assignmentName>
=							                    (. expression = null; .)
(                                               (. ExpressionNode receiver = r; .)
	"("						                    (. if(receiver == null); 
                                                      receiver = factory.createFunctionNode(assignmentName); .)
                                                (. List<ExpressionNode> parameters = new ArrayList<>(); .)
                                                (. ExpressionNode parameter; .)
		[
			Expression<out parameter>           (. parameters.add(parameter); .)
			{
				","
				Expression<out parameter>       (. parameters.add(parameter); .)
			}
		]
	")"                                         (. expression = factory.createCall(receiver, parameters); .)
)
.


END Pascal.
