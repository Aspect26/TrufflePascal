package cz.cuni.mff.d3s.trupple.language.nodes.literals;

import com.oracle.truffle.api.dsl.Specialization;

import cz.cuni.mff.d3s.trupple.language.runtime.customvalues.PascalString;
import cz.cuni.mff.d3s.trupple.language.nodes.ExpressionNode;
import cz.cuni.mff.d3s.trupple.parser.identifierstable.types.TypeDescriptor;
import cz.cuni.mff.d3s.trupple.parser.identifierstable.types.primitive.StringDescriptor;

/**
 * Node representing string literal.
 *
 * This node uses specializations which means that it is not used directly but completed node is generated by Truffle.
 * {@link StringLiteralNodeGen}
 */
public abstract class StringLiteralNode extends ExpressionNode {

	private final PascalString value;

	StringLiteralNode(String value) {
		this.value = new PascalString(value);
	}

	@Specialization
	public PascalString execute() {
		return value;
	}

    @Override
    public TypeDescriptor getType() {
        return StringDescriptor.getInstance();
    }

}
