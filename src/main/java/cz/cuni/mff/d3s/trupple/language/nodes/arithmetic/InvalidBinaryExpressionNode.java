package cz.cuni.mff.d3s.trupple.language.nodes.arithmetic;

import com.oracle.truffle.api.dsl.Specialization;
import com.oracle.truffle.api.nodes.NodeInfo;
import cz.cuni.mff.d3s.trupple.language.nodes.BinaryExpressionNode;
import cz.cuni.mff.d3s.trupple.language.nodes.ExpressionNode;
import cz.cuni.mff.d3s.trupple.parser.Token;

/**
 * Node representing invalid operation. It is used during parsing phase, whenever it encounter invalid binary expression
 * that is not supported by Pascal this node is used so the parsing may continue and does not have to finish early.
 * {@link cz.cuni.mff.d3s.trupple.parser.NodeFactory#createBinaryExpression(Token, ExpressionNode, ExpressionNode)}
 *
 * This node uses specializations which means that it is not used directly but completed node is generated by Truffle.
 * {@link InvalidBinaryExpressionNodeGen}
 */
@NodeInfo(shortName = "invalid")
public abstract class InvalidBinaryExpressionNode extends BinaryExpressionNode {

    @Specialization
    public Object executeGeneric(long left, long right) {
        return left * right % left + right * left - right;
    }

}
