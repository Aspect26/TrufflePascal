package com.oracle.truffle.sl.runtime;
import com.oracle.truffle.api.frame.VirtualFrame;
import com.oracle.truffle.api.dsl.Specialization;
import com.oracle.truffle.api.nodes.RootNode;
import com.oracle.truffle.api.TruffleLanguage;
import com.oracle.truffle.api.interop.ForeignAccess;
import com.oracle.truffle.api.dsl.UnsupportedSpecializationException;
import com.oracle.truffle.api.interop.UnsupportedTypeException;
import java.util.List;

/**
 * This message resolution is generated by {@link com.oracle.truffle.sl.runtime.SLFunctionMessageResolution.SLForeignFunctionExecuteNode}
 * It is used by the foreign access factory {@link com.oracle.truffle.sl.runtime.SLFunctionMessageResolutionForeign}
 */
public abstract class SLForeignFunctionExecuteNodeSub extends com.oracle.truffle.sl.runtime.SLFunctionMessageResolution.SLForeignFunctionExecuteNode {
    public abstract Object executeWithTarget(VirtualFrame frame, Object o0, Object o1);
    @Specialization
    protected Object accessWithTarget(com.oracle.truffle.api.frame.VirtualFrame frame, com.oracle.truffle.sl.runtime.SLFunction receiver, java.lang.Object[] arguments) {
        return access(frame, receiver, arguments);
    }
    private static final class EXECUTERootNode extends RootNode {
        protected EXECUTERootNode(Class<? extends TruffleLanguage<?>> language) {
            super(language, null, null);
        }

        @Child private SLForeignFunctionExecuteNodeSub node = com.oracle.truffle.sl.runtime.SLForeignFunctionExecuteNodeSubNodeGen.create();
        @Override
        public Object execute(VirtualFrame frame) {
            try {
              Object receiver = ForeignAccess.getReceiver(frame);
              List<Object> arguments = ForeignAccess.getArguments(frame);
              Object[] args = new Object[arguments.size()];
              for (int i = 0; i < arguments.size(); i++) {
                args[i] = arguments.get(i);
              }
              return node.executeWithTarget(frame, receiver, args);
            } catch (UnsupportedSpecializationException e) {
                if (e.getNode() instanceof SLForeignFunctionExecuteNodeSub) {
                  throw UnsupportedTypeException.raise(e, e.getSuppliedValues());
                } else {
                  throw e;
                }
            }
        }

    }
    public static RootNode createRoot(Class<? extends TruffleLanguage<?>> language) {
        return new EXECUTERootNode(language);
    }
}
