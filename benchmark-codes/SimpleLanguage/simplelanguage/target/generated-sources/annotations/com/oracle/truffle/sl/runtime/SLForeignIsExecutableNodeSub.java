package com.oracle.truffle.sl.runtime;
import com.oracle.truffle.api.frame.VirtualFrame;
import com.oracle.truffle.api.dsl.Specialization;
import com.oracle.truffle.api.nodes.RootNode;
import com.oracle.truffle.api.TruffleLanguage;
import com.oracle.truffle.api.interop.ForeignAccess;
import com.oracle.truffle.api.dsl.UnsupportedSpecializationException;
import com.oracle.truffle.api.interop.UnsupportedTypeException;

/**
 * This message resolution is generated by {@link com.oracle.truffle.sl.runtime.SLFunctionMessageResolution.SLForeignIsExecutableNode}
 * It is used by the foreign access factory {@link com.oracle.truffle.sl.runtime.SLFunctionMessageResolutionForeign}
 */
public abstract class SLForeignIsExecutableNodeSub extends com.oracle.truffle.sl.runtime.SLFunctionMessageResolution.SLForeignIsExecutableNode {
    public abstract Object executeWithTarget(VirtualFrame frame, Object o0);
    @Specialization
    protected Object accessWithTarget(java.lang.Object receiver) {
        return access(receiver);
    }
    private static final class IS_EXECUTABLERootNode extends RootNode {
        protected IS_EXECUTABLERootNode(Class<? extends TruffleLanguage<?>> language) {
            super(language, null, null);
        }

        @Child private SLForeignIsExecutableNodeSub node = com.oracle.truffle.sl.runtime.SLForeignIsExecutableNodeSubNodeGen.create();
        @Override
        public Object execute(VirtualFrame frame) {
            Object receiver = ForeignAccess.getReceiver(frame);
            try {
                return node.executeWithTarget(frame, receiver);
            } catch (UnsupportedSpecializationException e) {
                if (e.getNode() instanceof SLForeignIsExecutableNodeSub) {
                  throw UnsupportedTypeException.raise(e, e.getSuppliedValues());
                } else {
                  throw e;
                }
            }
        }

    }
    public static RootNode createRoot(Class<? extends TruffleLanguage<?>> language) {
        return new IS_EXECUTABLERootNode(language);
    }
}
