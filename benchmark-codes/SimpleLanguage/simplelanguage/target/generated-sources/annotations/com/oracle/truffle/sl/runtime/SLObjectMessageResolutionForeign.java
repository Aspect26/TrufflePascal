package com.oracle.truffle.sl.runtime;
import com.oracle.truffle.api.interop.ForeignAccess.Factory18;
import com.oracle.truffle.api.interop.ForeignAccess.Factory;
import com.oracle.truffle.api.interop.Message;
import com.oracle.truffle.api.interop.ForeignAccess;
import com.oracle.truffle.api.interop.TruffleObject;
import com.oracle.truffle.api.CallTarget;
import com.oracle.truffle.api.Truffle;
import com.oracle.truffle.api.nodes.RootNode;

/**
 * This foreign access factory is generated by {@link com.oracle.truffle.sl.runtime.SLObjectMessageResolution}.
 * You are supposed to use it for the receiver object {@link com.oracle.truffle.sl.runtime.SLObjectType}.
 */
public final class SLObjectMessageResolutionForeign implements Factory18, Factory {
  public static final ForeignAccess ACCESS = ForeignAccess.create(new SLObjectMessageResolutionForeign(), null);
  public static ForeignAccess createAccess() { return ForeignAccess.create(new SLObjectMessageResolutionForeign(), null); }

  private SLObjectMessageResolutionForeign() { }

  @Override
  public boolean canHandle(TruffleObject obj) {
    return com.oracle.truffle.sl.runtime.SLObjectType.isInstance(obj);
  }

    @Override
    public CallTarget accessIsNull() {
      return Truffle.getRuntime().createCallTarget(RootNode.createConstantNode(false));
    }
    @Override
    public CallTarget accessIsExecutable() {
      return Truffle.getRuntime().createCallTarget(RootNode.createConstantNode(false));
    }
    @Override
    public CallTarget accessIsBoxed() {
      return Truffle.getRuntime().createCallTarget(RootNode.createConstantNode(false));
    }
    @Override
    public CallTarget accessHasSize() {
      return Truffle.getRuntime().createCallTarget(RootNode.createConstantNode(false));
    }
    @Override
    public CallTarget accessGetSize() {
      return null;
    }
    @Override
    public CallTarget accessUnbox() {
      return null;
    }
    @Override
    public CallTarget accessRead() {
      return com.oracle.truffle.api.Truffle.getRuntime().createCallTarget(com.oracle.truffle.sl.runtime.SLForeignReadNodeSub.createRoot(com.oracle.truffle.sl.SLLanguage.class));
    }
    @Override
    public CallTarget accessWrite() {
      return com.oracle.truffle.api.Truffle.getRuntime().createCallTarget(com.oracle.truffle.sl.runtime.SLForeignWriteNodeSub.createRoot(com.oracle.truffle.sl.SLLanguage.class));
    }
    @Override
    public CallTarget accessExecute(int argumentsLength) {
      return null;
    }
    @Override
    public CallTarget accessInvoke(int argumentsLength) {
      return com.oracle.truffle.api.Truffle.getRuntime().createCallTarget(com.oracle.truffle.sl.runtime.SLForeignInvokeNodeSub.createRoot(com.oracle.truffle.sl.SLLanguage.class));
    }
    @Override
    public CallTarget accessNew(int argumentsLength) {
      return null;
    }
    @Override
    public CallTarget accessKeys() {
      return com.oracle.truffle.api.Truffle.getRuntime().createCallTarget(com.oracle.truffle.sl.runtime.SLForeignPropertiesNodeSub.createRoot(com.oracle.truffle.sl.SLLanguage.class));
    }
    @Override
    public CallTarget accessMessage(Message unknown) {
      return null;
    }
}
